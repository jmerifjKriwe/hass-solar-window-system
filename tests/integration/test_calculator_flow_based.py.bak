"""
Refactored test suite for the SolarWindowCalculator (migrated).
"""
Refactored test suite for the SolarWindowCalculator (migrated).

This file contains unit tests for geometric shadow calculation, cache
behaviour, effective configuration merging, and solar power calculations.

Type annotations and docstrings in tests can be noisy; disable ANN001 and
D103 for this test module.
"""

# ruff: noqa: ANN001,D103,S101

from unittest.mock import Mock, patch
import pytest
"""Clean, minimal tests for SolarWindowCalculator.

This file replaces a previously corrupted test module and provides a small
set of deterministic unit tests that exercise the calculator behaviour
without relying on Home Assistant runtime. It is intentionally small to
validate imports and monkeypatching only.
"""

# ruff: noqa: ANN001,D103,S101
"""Minimal, valid tests for SolarWindowCalculator.

This file was recreated to remove stray non-Python text that previously
prevented pytest from importing the module. It intentionally contains a
small, self-contained set of tests to validate imports and monkeypatching.
"""

# ruff: noqa: ANN001,D103,S101

from unittest.mock import Mock
import pytest

from custom_components.solar_window_system.calculator import SolarWindowCalculator
from tests.test_data import (
    VALID_PHYSICAL,
    VALID_TEMPERATURES,
    VALID_THRESHOLDS,
    VALID_WINDOW_DATA,
)


@pytest.fixture
def calculator(hass, window_entry):
    return SolarWindowCalculator(hass, window_entry)


def test_recalculation_triggered_on_weather_warning(monkeypatch) -> None:
    """Ensure calculator recalculates when weather warning state changes."""
    mock_entry = Mock()
    mock_entry.data = {"entry_type": "window_configs"}
    calc = SolarWindowCalculator(Mock(), mock_entry)

    def _subentries(t):
        return {
            "window": {"w1": VALID_WINDOW_DATA.copy()} if t == "window" else {},
            "group": {},
            "global": {"global_config": {}},
        }[t]

    def _global_data():
        return {
            "solar_radiation_sensor": "sensor.solar_radiation",
            "outdoor_temperature_sensor": "sensor.outdoor_temp",
            "weather_forecast_temperature_sensor": "sensor.forecast_temp",
            "weather_warning_sensor": "sensor.weather_warning",
        }

    def _cached_state_zero(*_a, **_kw):
        return 0

    def _get_safe_attr_zero(*_a, **_kw):
        return 0

    def _get_effective_config_from_flows(_w):
        return ({
            "physical": VALID_PHYSICAL,
            "thresholds": VALID_THRESHOLDS,
            "temperatures": VALID_TEMPERATURES,
        }, {})

    def _apply_global_factors_identity(c, _g, _e):
        return c

    def _should_shade_window_from_flows(_req):
        return True, "Should shade"

    def _get_scenario_enables_from_flows(_w, _e):
        return False, False

    def _cached_state_str_off(*_a, **_kw):
        return "off"

    def _cached_state_str_on(*_a, **_kw):
        return "on"

    monkeypatch.setattr(calc, "_get_subentries_by_type", _subentries)
    monkeypatch.setattr(calc, "_get_global_data_merged", _global_data)
    monkeypatch.setattr(calc, "_get_cached_entity_state", _cached_state_zero)
    monkeypatch.setattr(calc, "get_safe_attr", _get_safe_attr_zero)
    monkeypatch.setattr(calc, "get_effective_config_from_flows", _get_effective_config_from_flows)
    monkeypatch.setattr(calc, "apply_global_factors", _apply_global_factors_identity)
    monkeypatch.setattr(calc, "_should_shade_window_from_flows", _should_shade_window_from_flows)
    monkeypatch.setattr(calc, "_get_scenario_enables_from_flows", _get_scenario_enables_from_flows)

    call_count = {"count": 0}
    orig_calc = calc.calculate_all_windows_from_flows

    def counting_calc():
        call_count["count"] += 1
        return orig_calc()

    monkeypatch.setattr(calc, "calculate_all_windows_from_flows", counting_calc)

    monkeypatch.setattr(calc, "_get_cached_entity_state", _cached_state_str_off)
    calc.calculate_all_windows_from_flows()
    monkeypatch.setattr(calc, "_get_cached_entity_state", _cached_state_str_on)
    calc.calculate_all_windows_from_flows()

    assert call_count["count"] == 2


def test_shadow_factor_basic(calculator) -> None:
    assert calculator._calculate_shadow_factor(45, 180, 180, 0, 0) == 1.0
